{"ast":null,"code":"import { checkNoObstacles } from './CheckNoObstacles.js';\nimport { legalHorsie } from './LegalHorsie.js';\nimport { legalQueen } from './LegalQueen.js';\nimport { legalRook } from './LegalRook.js';\nimport { legalPawn } from './LegalPawn.js';\nimport { legalBishup } from './LegalBishup.js';\nimport { legalKing } from './LegalKing.js';\nexport function legalPiece(col, row, newBoard, startPos) {\n  let legalMove = false;\n  switch (newBoard[startPos[0]][startPos[1]].id) {\n    case 1:\n      legalMove = legalKing(col, row, startPos);\n      break;\n    case 2:\n      legalMove = legalQueen(col, row, startPos);\n      break;\n    case 3:\n      legalMove = legalRook(col, row, startPos);\n      break;\n    case 4:\n      legalMove = legalBishup(col, row, startPos);\n      break;\n    case 5:\n      legalMove = legalHorsie(col, row, startPos);\n      break;\n    case 6:\n      legalMove = legalPawn(col, row, newBoard, startPos);\n      break;\n  }\n  if (legalMove && checkNoObstacles(col, row, newBoard, startPos)) {\n    if (newBoard[col][row].isWhite !== newBoard[startPos[0]][[startPos[1]]].isWhite) {\n      return true;\n    }\n  }\n  return false;\n}","map":{"version":3,"names":["checkNoObstacles","legalHorsie","legalQueen","legalRook","legalPawn","legalBishup","legalKing","legalPiece","col","row","newBoard","startPos","legalMove","id","isWhite"],"sources":["/home/akif/Documenten/projects/chess/src/LegalMove.js"],"sourcesContent":["import { checkNoObstacles } from './CheckNoObstacles.js';\nimport { legalHorsie } from './LegalHorsie.js';\nimport { legalQueen } from './LegalQueen.js';\nimport { legalRook } from './LegalRook.js';\nimport { legalPawn } from './LegalPawn.js';\nimport { legalBishup } from './LegalBishup.js';\nimport { legalKing } from './LegalKing.js';\n\nexport function legalPiece(col, row, newBoard, startPos) {\n\n    let legalMove = false;\n\n    switch(newBoard[startPos[0]][startPos[1]].id) {\n        case 1:\n            legalMove = legalKing(col, row, startPos);\n            break;\n        case 2:\n            legalMove = legalQueen(col, row, startPos);\n            break;\n        case 3:\n            legalMove = legalRook(col, row, startPos);\n            break;\n        case 4:\n            legalMove = legalBishup(col, row, startPos);\n            break;\n        case 5:\n            legalMove = legalHorsie(col, row, startPos);\n            break;\n        case 6:\n            legalMove = legalPawn(col, row, newBoard, startPos);\n            break;\n    }\n\n    if (legalMove && checkNoObstacles(col, row, newBoard, startPos)) {\n        if (newBoard[col][row].isWhite !== newBoard[startPos[0]][[startPos[1]]].isWhite) {\n            return true;\n        }\n    }\n    return false;\n}"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,uBAAuB;AACxD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,QAAQ,gBAAgB;AAE1C,OAAO,SAASC,UAAUA,CAACC,GAAG,EAAEC,GAAG,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;EAErD,IAAIC,SAAS,GAAG,KAAK;EAErB,QAAOF,QAAQ,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAACA,QAAQ,CAAC,CAAC,CAAC,CAAC,CAACE,EAAE;IACxC,KAAK,CAAC;MACFD,SAAS,GAAGN,SAAS,CAACE,GAAG,EAAEC,GAAG,EAAEE,QAAQ,CAAC;MACzC;IACJ,KAAK,CAAC;MACFC,SAAS,GAAGV,UAAU,CAACM,GAAG,EAAEC,GAAG,EAAEE,QAAQ,CAAC;MAC1C;IACJ,KAAK,CAAC;MACFC,SAAS,GAAGT,SAAS,CAACK,GAAG,EAAEC,GAAG,EAAEE,QAAQ,CAAC;MACzC;IACJ,KAAK,CAAC;MACFC,SAAS,GAAGP,WAAW,CAACG,GAAG,EAAEC,GAAG,EAAEE,QAAQ,CAAC;MAC3C;IACJ,KAAK,CAAC;MACFC,SAAS,GAAGX,WAAW,CAACO,GAAG,EAAEC,GAAG,EAAEE,QAAQ,CAAC;MAC3C;IACJ,KAAK,CAAC;MACFC,SAAS,GAAGR,SAAS,CAACI,GAAG,EAAEC,GAAG,EAAEC,QAAQ,EAAEC,QAAQ,CAAC;MACnD;EACR;EAEA,IAAIC,SAAS,IAAIZ,gBAAgB,CAACQ,GAAG,EAAEC,GAAG,EAAEC,QAAQ,EAAEC,QAAQ,CAAC,EAAE;IAC7D,IAAID,QAAQ,CAACF,GAAG,CAAC,CAACC,GAAG,CAAC,CAACK,OAAO,KAAKJ,QAAQ,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAACA,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAACG,OAAO,EAAE;MAC7E,OAAO,IAAI;IACf;EACJ;EACA,OAAO,KAAK;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}