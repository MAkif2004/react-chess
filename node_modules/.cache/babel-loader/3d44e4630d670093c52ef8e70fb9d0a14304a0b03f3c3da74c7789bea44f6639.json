{"ast":null,"code":"export function checkNoObstacles(col, row, newBoard, startPos) {\n  let colCheck = [];\n  let rowCheck = [];\n  if (col !== startPos[0] && row == startPos[1]) {\n    for (let i = col + 1; i < startPos[0]; i++) {\n      if (newBoard[i][row] !== 0) {\n        return false;\n      }\n    }\n    for (let i = col - 1; i > startPos[0]; i--) {\n      if (newBoard[i][col] !== 0) {\n        return false;\n      }\n    }\n  } else if (row !== startPos[1] && col == startPos[0]) {\n    for (let i = row + 1; i < startPos[1]; i++) {\n      if (newBoard[col][i] !== 0) {\n        return false;\n      }\n    }\n    for (let i = row - 1; i > startPos[1]; i--) {\n      if (newBoard[col][i] !== 0) {\n        return false;\n      }\n    }\n  } else if (col !== startPos[0] && row !== startPos[1]) {\n    for (let i = col + 1; i < startPos[0]; i++) {\n      colCheck.push(i);\n    }\n    for (let j = row - 1; j > startPos[1]; j--) {\n      rowCheck.push(j);\n    }\n    for (let k = 0; k < colCheck.length; k++) {\n      if (newBoard[colCheck[k]][rowCheck[k]] !== 0 && newBoard[colCheck[k]][rowCheck[k]] !== undefined) {\n        return false;\n      }\n    }\n    rowCheck = [];\n    for (let j = row + 1; j < startPos[1]; j++) {\n      rowCheck.push(j);\n    }\n    for (let k = 0; k < colCheck.length; k++) {\n      if (newBoard[colCheck[k]][rowCheck[k]] !== 0 && newBoard[colCheck[k]][rowCheck[k]] !== undefined) {\n        return false;\n      }\n    }\n    colCheck = [];\n    for (let i = col - 1; i > startPos[0]; i--) {\n      colCheck.push(i);\n    }\n    for (let k = 0; k < colCheck.length; k++) {\n      if (newBoard[colCheck[k]][rowCheck[k]] !== 0 && newBoard[colCheck[k]][rowCheck[k]] !== undefined) {\n        return false;\n      }\n    }\n    rowCheck = [];\n    for (let j = row - 1; j > startPos[1]; j--) {\n      rowCheck.push(j);\n    }\n    for (let k = 0; k < colCheck.length; k++) {\n      if (newBoard[colCheck[k]][rowCheck[k]] !== 0 && newBoard[colCheck[k]][rowCheck[k]] !== undefined) {\n        return false;\n      }\n    }\n  }\n  return true;\n}","map":{"version":3,"names":["checkNoObstacles","col","row","newBoard","startPos","colCheck","rowCheck","i","push","j","k","length","undefined"],"sources":["/home/akif/Documenten/projects/chess/src/CheckNoObstacles.js"],"sourcesContent":["export function checkNoObstacles(col, row, newBoard, startPos) {\n\n    let colCheck = [];\n    let rowCheck = [];\n\n    if (col !== startPos[0] && row == startPos[1]) {\n        for (let i = col + 1; i < startPos[0]; i++) {\n            if (newBoard[i][row] !== 0) {\n                return false;\n            }\n        }\n        for (let i = col - 1; i > startPos[0]; i--) {\n            if (newBoard[i][col] !== 0) {\n                return false;\n            }\n        }\n    }\n\n    else if (row !== startPos[1] && col == startPos[0]) {\n        for (let i = row + 1; i < startPos[1]; i++) {\n            if (newBoard[col][i] !== 0) {\n                return false;\n            }\n        }\n        for (let i = row - 1; i > startPos[1]; i--) {\n            if (newBoard[col][i] !== 0) {\n                return false;\n            }\n        }\n    }\n\n    else if (col !== startPos[0] && row !== startPos[1]) {\n        for (let i = col + 1; i < startPos[0]; i++) {\n            colCheck.push(i);\n        }\n\n        for (let j = row - 1; j > startPos[1]; j--) {\n            rowCheck.push(j);\n        }\n\n        for (let k = 0; k < colCheck.length; k++) {\n            if (newBoard[colCheck[k]][rowCheck[k]] !== 0\n            && newBoard[colCheck[k]][rowCheck[k]] !== undefined) {\n                return false;\n            }\n        }\n\n        rowCheck = [];\n\n        for (let j = row + 1; j < startPos[1]; j++) {\n            rowCheck.push(j);\n        }\n\n        for (let k = 0; k < colCheck.length; k++) {\n            if (newBoard[colCheck[k]][rowCheck[k]] !== 0\n            && newBoard[colCheck[k]][rowCheck[k]] !== undefined) {\n                return false;\n            }\n        }\n\n        colCheck = [];\n\n        for (let i = col - 1; i > startPos[0]; i--) {\n            colCheck.push(i);\n        }\n\n        for (let k = 0; k < colCheck.length; k++) {\n            if (newBoard[colCheck[k]][rowCheck[k]] !== 0\n            && newBoard[colCheck[k]][rowCheck[k]] !== undefined) {\n                return false;\n            }\n        }\n\n        rowCheck = [];\n\n        for (let j = row - 1; j > startPos[1]; j--) {\n            rowCheck.push(j);\n        }\n\n        for (let k = 0; k < colCheck.length; k++) {\n            if (newBoard[colCheck[k]][rowCheck[k]] !== 0\n            && newBoard[colCheck[k]][rowCheck[k]] !== undefined) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}